using BepInEx;
using BepInEx.Unity.IL2CPP;
using System.IO;
using System.Net;
using System.Reflection;
using System;
using BepInEx.Configuration;
using System.Net.Http;

namespace P5XTranslateDL;

[BepInPlugin(pluginGuid, pluginName, pluginVersion)]
public class Plugin : BasePlugin
{
    public const string pluginGuid = "P5XTranslateDL";
    public const string pluginName = "P5X Translate DL";
    public const string pluginVersion = "0.1";
     

    enum files { _AutoGeneratedTranslations, _Postprocessors, _Preprocessors, _Substitutions, ManualTranslations }
    enum languages { KR, CN, TW }

    private ConfigEntry<languages> configLanguage;
    private ConfigEntry<bool> includeAutoGen;

    public override void Load()
    {
        Log.LogInfo($"Plugin {pluginGuid} is loaded!");
        configLanguage = Config.Bind("Translate Lagnuage", "Langauge",languages.KR, "Language to download files for");
        includeAutoGen = Config.Bind("Auto Gen Translation", "AutoGen", false, "If you want to download AutoGeneratedTranslations, this will overwrite yours");
        getFromGit();
    }

    private async void getFromGit()
    {
        var pathString = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        pathString = pathString.Remove(pathString.Length - 7) + "Translation\\en\\Text\\";

        var fileString = "https://raw.githubusercontent.com/JayJay34/P5XTranslate/main/" + configLanguage.Value.ToString() + "/";

        foreach (string name in Enum.GetNames(typeof(files)))
        {
            if (name != "_AutoGeneratedTranslations" || name == "_AutoGeneratedTranslations" && includeAutoGen.Value)
            {
                Log.LogInfo("Path: " + pathString + name + ".txt");
                Log.LogInfo("URL: " + fileString + name + ".txt");
                var path = pathString + name + ".txt";
                using var client = new HttpClient();
                var content = await client.GetStringAsync(fileString + name + ".txt?time=" + DateTime.Now);
                File.WriteAllText(path, content);
            }
        }
    }
}
